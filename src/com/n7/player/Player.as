package com.n7.player{			import flash.display.DisplayObject;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.events.MouseEvent;	import flash.events.ProgressEvent;	import flash.events.TimerEvent;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;	import flash.net.URLRequest;	import flash.utils.Timer;		import mx.controls.Alert;
		public class Player extends EventDispatcher {					public var repeat:String = PlayerRepeat.REPEAT_NONE;		public var trackDirectory:String="";		private var singleTrack:Boolean = false;		private var _playrState:String = PlayerStates.INIT;																				private var _volume:Number=1;		private var _panning:Number=0;		private var _sound:Sound;		private var _soundChannel:SoundChannel;		private var _playlist:PlayerlistManager;		private var _autoPlay:Boolean=false;		private var _pauseTimer:Number=0;		private var _trackProgressTimer:Timer = new Timer(250);		private var _mute:Boolean=false;		private var _playButton:DisplayObject;		private var _pauseButton:DisplayObject;		private var _stopButton:DisplayObject;		private var _nextButton:DisplayObject;		private var _prevButton:DisplayObject;		private var _muteButton:DisplayObject;		private var _togglePlayPauseButton:DisplayObject;		private var fadeTimer:Timer;		private var fadeBegin:Number;		private var fadeEnd:Number;		private var fadeTime:Number;		/********************************************************************************		*********************************************************************************		**********************									*************************		**********************									*************************		**********************			Public methods			*************************		**********************									*************************		**********************									*************************		*********************************************************************************		********************************************************************************/  					private static var playerInstance:Player;				public static function getPlayerInstance(): Player 		{			if (null == playerInstance) {				playerInstance = new Player();			}						return playerInstance;		}						/**		 * Creates a Playr instance. You can actually build a complete playlistsupported music player using only the constructor. Just set the all of this at once, and you're set!		 */		public function Player(playlistURL:String='',trackDirectory:String='',autoPlay:Boolean=false,shuffle:Boolean=false,repeat:String=PlayerRepeat.REPEAT_NONE){			fadeTimer = new Timer(100);			fadeTimer.addEventListener(TimerEvent.TIMER,handleUpdate);			this.trackDirectory=trackDirectory;			this.repeat = repeat;						_playlist = new PlayerlistManager(playlistURL);			this.autoPlay = autoPlay;			this.shuffle = shuffle;						_playlist.addEventListener(PlayerInternalEvent.PLAYLIST_LOADED,playlistManagerReady);			_playlist.addEventListener(PlayerInternalEvent.PLAYLIST_TRACK_OUT_OF_BOUNDS,playlistTrackOutOfBoundsErrorHandler);			_playlist.addEventListener(PlayerInternalEvent.PLAYLIST_STREAM_ERROR, playlistStreamErrorHandler);			_playlist.addEventListener(PlayerInternalEvent.PLAYLIST_INVALID_XML, invalidPlaylistXMLHandler);			_playlist.addEventListener(PlayerInternalEvent.TRACK_NOT_ADDED_TO_PLAYLIST, trackNotAddedToPlaylistErrorHandler);			_playlist.addEventListener(PlayerInternalEvent.TRACK_ADDED_TO_PLAYLIST, trackAddedToPlaylistHandler);			_playlist.addEventListener(PlayerInternalEvent.CURRENT_TRACK_TO_BE_REMOVED, currentTrackToBeRemovedHandler);			_trackProgressTimer.addEventListener(TimerEvent.TIMER, notifyTrackProgress);			state = PlayerStates.WAITING;		}				/**		 * Toggles between play and pause using the play() and pause() methods.		 */		public function togglePlayPause():void{			switch(playrState){				case PlayerStates.PLAYING:					pause();					break;				case PlayerStates.PAUSED:				case PlayerStates.STOPPED:				case PlayerStates.READY:					play();					break;			}		}				public function play():void{			if(_playlist.getCurrentTrack() != null){				if(playrState!=PlayerStates.PLAYING && playrState != PlayerStates.WAITING && playrState != PlayerStates.INIT){					if(_sound == null){    						var temp:Boolean = _autoPlay;						_autoPlay=false;						loadTrack(_playlist.getCurrentTrack().file);						_autoPlay= temp;					}					_soundChannel = _sound.play(_pauseTimer);					_soundChannel.addEventListener(Event.SOUND_COMPLETE, soundCompleteHandler);					_trackProgressTimer.start();					volume = _volume;					panning = _panning;					state = PlayerStates.PLAYING;				}			}			else{				state = PlayerStates.WAITING;			}		}				public function pause():void{			if(_soundChannel!=null){			_pauseTimer = _soundChannel.position;			_soundChannel.stop();			_trackProgressTimer.stop();			state = PlayerStates.PAUSED;			}		}				public function stop():void{			if(_soundChannel != null){				_pauseTimer = 0;				_soundChannel.stop();				state = PlayerStates.STOPPED;				_trackProgressTimer.stop();			}			}				public function next():void{			if(_playlist.getCurrentTrack() != null)  {				stop();				_playlist.gotoNextTrack();				loadTrack(_playlist.getCurrentTrack().file);				dispatchEvent(new PlayerEvent(PlayerEvent.NEXT_TRACK));					play();			}		}				public function previous(shouldStartPlaying:Boolean = false):void{			stop();			_playlist.gotoPreviousTrack();			if(_playlist.getCurrentTrack() != null)  {				loadTrack(_playlist.getCurrentTrack().file);				dispatchEvent(new PlayerEvent(PlayerEvent.PREV_TRACK));									if (shouldStartPlaying) {					play();				}			}		}				public function jumpToTrack(trackNumber:Number):void{			if(!singleTrack){					stop();					_playlist.gotoTrack(trackNumber);					loadTrack(_playlist.getCurrentTrack().file);					play();			}			else{				dispatchEvent(new PlayerErrorEvent(PlayerErrorEvent.NO_PLAYLIST_SELECTED));			}		}						public function scrobbleTo(target:Number):void{			if( _soundChannel != null){				_soundChannel.stop();				if(this.playrState != PlayerStates.STOPPED){					_soundChannel = _sound.play(target);					volume = _volume;					_soundChannel.addEventListener(Event.SOUND_COMPLETE, soundCompleteHandler);					if(this.playrState == PlayerStates.PAUSED){						pause();					}					var evt:PlayerEvent = new PlayerEvent(PlayerEvent.PLAYR_SCROBBLED);					evt.totalTime = totalTime;					evt.totalSeconds = totalSeconds;					evt.currentTime = currentTime;					evt.currentSeconds = currentSeconds;					dispatchEvent(evt);				}			}		}						public function loadPlaylist(playlistpath:String):void{			singleTrack = false;			_playlist.loadPlaylist(playlistpath);		}				public function loadTrackFromURL(filename:String):void{			singleTrack = true;			loadTrack(filename);		}				public function toggleMute():void{			_mute = !_mute;			var st:SoundTransform;			if(_mute){				st = _soundChannel.soundTransform;				st.volume = 0;				_soundChannel.soundTransform = st;				dispatchEvent(new PlayerEvent(PlayerEvent.MUTED));			}			else{				st = _soundChannel.soundTransform;				st.volume = _volume;				_soundChannel.soundTransform = st;				dispatchEvent(new PlayerEvent(PlayerEvent.UNMUTED));			}		}						public function registerPlayButton(button:DisplayObject):void{			_playButton = button;			_playButton.addEventListener(MouseEvent.CLICK, handlePlayButtonClick);		}				public function registerTogglePlayPauseButton(button:DisplayObject):void{			_togglePlayPauseButton = button;			_togglePlayPauseButton.addEventListener(MouseEvent.CLICK, handleTogglePlayPauseButtonClick);		}				public function registerPauseButton(button:DisplayObject):void{			_pauseButton = button;			_pauseButton.addEventListener(MouseEvent.CLICK, handlePauseButtonClick);		}				public function registerStopButton(button:DisplayObject):void{			_stopButton = button;			_stopButton.addEventListener(MouseEvent.CLICK, handleStopButtonClick);		}				public function registerNextButton(button:DisplayObject):void{			_nextButton = button;			_nextButton.addEventListener(MouseEvent.CLICK, handleNextButtonClick);		}				public function registerPreviousButton(button:DisplayObject):void{			_prevButton = button;			_prevButton.addEventListener(MouseEvent.CLICK, handlePreviousButtonClick);		}				public function registerMuteButton(button:DisplayObject):void{			_muteButton = button;			_muteButton.addEventListener(MouseEvent.CLICK, handleMuteButtonClick);		}				public function destroy():void{					if(_playButton != null){				_playButton.removeEventListener(MouseEvent.CLICK,handlePlayButtonClick);			}			if(_pauseButton != null){				_pauseButton.removeEventListener(MouseEvent.CLICK,handlePauseButtonClick);			}						if(_stopButton != null){				_stopButton.removeEventListener(MouseEvent.CLICK,handleStopButtonClick);			}			if(_muteButton != null){				_muteButton.removeEventListener(MouseEvent.CLICK,handleMuteButtonClick);			}			if(_nextButton != null){				_nextButton.removeEventListener(MouseEvent.CLICK,handleNextButtonClick);			}			if(_prevButton != null){				_prevButton.removeEventListener(MouseEvent.CLICK,handlePreviousButtonClick);			}			if(_togglePlayPauseButton != null){				_togglePlayPauseButton.removeEventListener(MouseEvent.CLICK,handleTogglePlayPauseButtonClick);			}		}				public function fadeOut(time:Number=2):void{			fade(time,volume,0);		}				public function fadeIn(time:Number=2,targetVolume:Number=1):void{			volume=0;			fade(time,0,targetVolume);		}				public function fade(time:Number,startVolume:Number,targetVolume:Number):void{			volume = startVolume;			fadeTime = time;			fadeBegin = startVolume;			fadeEnd = targetVolume;			fadeTimer.start();		}				/********************************************************************************		*********************************************************************************		**********************									*************************		**********************									*************************		**********************		  Public properties			*************************		**********************									*************************		**********************									*************************		*********************************************************************************		********************************************************************************/ 				public function get playrState():String{			return _playrState;		}		private function set state(value:String):void{			_playrState = value;			var evt:PlayerEvent=new PlayerEvent(PlayerEvent.PLAYRSTATE_CHANGED);			evt.playrState = playrState;			dispatchEvent(evt);		}				public function get artist():String{			return _playlist.getCurrentTrack().artist;		}				public function get album():String{			return _playlist.getCurrentTrack().album;		}				public function get title():String{			return _playlist.getCurrentTrack().title || "Test";		}				public function set volume(newVolume:Number):void{			if(newVolume>1){				_volume = 1;			}			else if(newVolume<0){				_volume = 0;			} else {				_volume = newVolume;			}			if(!_mute){//if not muted, automatically change the volume				if(_soundChannel != null){					var st:SoundTransform = _soundChannel.soundTransform;					st.volume = _volume;					_soundChannel.soundTransform = st;				}			}			var evt:PlayerEvent=new PlayerEvent(PlayerEvent.VOLUME_SET);			evt.volume = _volume;			dispatchEvent(evt);			}		public function get volume():Number{			if(_mute){				return 0;			}			else {				return _volume;			}		}				public function get autoPlay():Boolean{			return _autoPlay;		}		public function set autoPlay(value:Boolean):void{			_autoPlay = value;			if(_autoPlay){				play();			}		}				public function get playlist():PlayerlistManager{			return _playlist;		}		public function set playlist(list:PlayerlistManager):void{			stop();			_sound = null;			_soundChannel =null;			state = PlayerStates.LOADING_PLAYLIST;			_playlist = list;			_playlist.gotoFirstTrack();			state = PlayerStates.READY;			dispatchEvent(new PlayerEvent(PlayerEvent.PLAYLIST_UPDATED));						if(autoPlay){				play();			}		}		public function set shuffle(value:Boolean):void{			var res:Boolean = _playlist.setShuffle(value); 			if(res && playrState != PlayerStates.INIT && playrState != PlayerStates.LOADING_PLAYLIST){				dispatchEvent(new PlayerEvent(PlayerEvent.PLAYLIST_UPDATED));			}			if(playrState != PlayerStates.PLAYING && res){				_playlist.gotoFirstTrack();			}		}						public function get totalSeconds():Number{			return _playlist.getCurrentTrack().totalSeconds;		}		public function get currentSeconds():Number{			if(_soundChannel!=null){				return Math.round(Math.round(_soundChannel.position/1000));			}			else{				return 0;			}		}		public function get currentTime():String{			var pos:String="";			if(_soundChannel!=null){				var min:Number = (Math.round(_soundChannel.position/1000) - (Math.round(_soundChannel.position/1000)%60))/60;				var sec:Number = Math.ceil(_soundChannel.position/1000)%60;				pos = min + ':';					if(sec<10){						pos += "0";					}				pos += sec;			}			else{				pos = '0:00';			}			return pos;		} 		public function get totalTime():String{			return _playlist.getCurrentTrack().totalTime;		}		 		 public function set panning(value:Number):void{		 	if(value>1){		 		_panning = 1;		 	}else if(value<-1){		 		_panning=-1		 	}else{		 		_panning = value;		 	}		 	if(_soundChannel !=null){			 	var st:SoundTransform = _soundChannel.soundTransform;			 	st.pan = _panning;			 	_soundChannel.soundTransform = st;			 }		 }		 public function get panning():Number{		 	return _panning;		 }		 public function get mute():Boolean{		 	return _mute;		 }		 public function set mute(value:Boolean):void{		 	if(_mute != value){		 		toggleMute();		 	}		 }		 		 		 		 		/********************************************************************************		*********************************************************************************		**********************									*************************		**********************									*************************		**********************		 Private handlers			*************************		**********************		 Private properties			*************************		**********************		 Internal functions			*************************		**********************									*************************		**********************									*************************		*********************************************************************************		********************************************************************************/ 				private function handleUpdate(e:TimerEvent):void{						var jump:Number = (fadeEnd - fadeBegin)/(fadeTime*10);// 10 is related to the 10 steps/second. 10 steps per second because of the 100ms timer tick. Might rewrite this one day...			//trace(jump);			if(Math.abs(jump) != jump){ //volume is lowering				//trace('lowering');				if(fadeEnd > volume + jump){					fadeTimer.stop();					volume=fadeEnd;					return;				}			}			else{//volume is rising				//trace('rising');				if(fadeEnd < volume + jump){					fadeTimer.stop();					volume=fadeEnd;					return;				}			}			volume += jump;				//trace(volume);		}		 		private function handleMuteButtonClick(e:MouseEvent):void{			toggleMute();		}		private function handlePlayButtonClick(e:MouseEvent):void{			play();		}		private function handlePauseButtonClick(e:MouseEvent):void{			pause();		}		private function handleStopButtonClick(e:MouseEvent):void{			stop();		}		private function handleNextButtonClick(e:MouseEvent):void{			next();		}		private function handlePreviousButtonClick(e:MouseEvent):void{			stop();		}		private function handleTogglePlayPauseButtonClick(e:MouseEvent):void{			togglePlayPause();		}		private function playlistManagerReady(e:PlayerInternalEvent):void{			state = PlayerStates.READY;			_playlist.gotoFirstTrack();			dispatchEvent(new PlayerEvent(PlayerEvent.PLAYLIST_LOADED));			if(_autoPlay){				play();			}		}		public function playTrack(track:PlayerTrack):void{			loadTrack(track.file,track);		}		private function loadTrack(filename:String,track:PlayerTrack=null):void{						var sp:PlayerEvent = new PlayerEvent(PlayerEvent.STREAM_PROGRESS);			sp.progress = 0;			var tp:PlayerEvent = new PlayerEvent(PlayerEvent.TRACK_PROGRESS);			tp.progress = 0;			if(!singleTrack || track != null){				//playlist driven				if(track != null){					_playlist = new PlayerlistManager();					_playlist.addTrack(track);					_playlist.gotoFirstTrack();					filename = track.file; //this is kinda unnecessary, but just in case...				}								if(_sound != null){					_sound.removeEventListener(ProgressEvent.PROGRESS, showStreamProgress);					_sound.removeEventListener(IOErrorEvent.IO_ERROR,soundIOErrorHandler);				}				_sound = new Sound();				_sound.addEventListener(IOErrorEvent.IO_ERROR, ioErrorEventHandler);				_sound.load(new URLRequest(trackDirectory + filename));											dispatchEvent(sp);				dispatchEvent(tp);								_sound.addEventListener(ProgressEvent.PROGRESS, showStreamProgress);				_sound.addEventListener(IOErrorEvent.IO_ERROR,soundIOErrorHandler);				dispatchEvent(new PlayerEvent(PlayerEvent.SONGINFO));								state = PlayerStates.READY;								}			else{				var track:PlayerTrack = new PlayerTrack();				track.file = filename;								_playlist = new PlayerlistManager();				_playlist.addTrack(track);				_playlist.gotoFirstTrack();								if(_sound != null){					_sound.removeEventListener(ProgressEvent.PROGRESS, showStreamProgress);					_sound.removeEventListener(IOErrorEvent.IO_ERROR,soundIOErrorHandler);				}								_sound = new Sound();				_sound.load(new URLRequest(trackDirectory + filename));											dispatchEvent(sp);				dispatchEvent(tp);								_sound.addEventListener(ProgressEvent.PROGRESS, showStreamProgress);				_sound.addEventListener(IOErrorEvent.IO_ERROR,soundIOErrorHandler);								_sound.addEventListener(Event.ID3, updateSingleTrackID3Info);				state = PlayerStates.READY;			}			if(autoPlay){				play();			}		}		private function updateSingleTrackID3Info(e:Event):void{			_playlist.getCurrentTrack().artist = Sound(e.target).id3.artist;			_playlist.getCurrentTrack().album = Sound(e.target).id3.album;			_playlist.getCurrentTrack().title = Sound(e.target).id3.songName;			dispatchEvent(new PlayerEvent(PlayerEvent.SONGINFO));			}		private function soundIOErrorHandler(e:IOErrorEvent):void{			stop();			dispatchEvent(new PlayerErrorEvent(PlayerErrorEvent.SOUND_STREAM_ERROR));			next();					}		private function invalidPlaylistXMLHandler(e:PlayerInternalEvent):void{			dispatchEvent(new PlayerErrorEvent(PlayerErrorEvent.PLAYLIST_INVALID_XML));		}		private function showStreamProgress(e:ProgressEvent):void{			var pe:PlayerEvent = new PlayerEvent(PlayerEvent.STREAM_PROGRESS);			pe.progress = e.bytesLoaded/e.bytesTotal;			dispatchEvent(pe);		}		private function notifyTrackProgress(e:TimerEvent):void{			if(_soundChannel != null && _playlist.getCurrentTrack() != null){				var pe:PlayerEvent = new PlayerEvent(PlayerEvent.TRACK_PROGRESS);				if(!singleTrack){					pe.progress = (_soundChannel.position/1000)/_playlist.getCurrentTrack().totalSeconds;				}				dispatchEvent(pe);			}		}		private function playlistTrackOutOfBoundsErrorHandler(e:PlayerInternalEvent):void{			dispatchEvent(new PlayerErrorEvent(PlayerErrorEvent.TRACK_OUT_OF_BOUNDS));		}		private function playlistStreamErrorHandler(e:PlayerInternalEvent):void{			dispatchEvent(new PlayerErrorEvent(PlayerErrorEvent.PLAYLIST_STREAM_ERROR));		}		private function trackNotAddedToPlaylistErrorHandler(e:PlayerInternalEvent):void{			dispatchEvent(new PlayerErrorEvent(PlayerErrorEvent.TRACK_NOT_ADDED_TO_PLAYLIST));		}		private function trackAddedToPlaylistHandler(e:PlayerInternalEvent):void{			if(_playlist.totalTracks ==1){				_playlist.gotoFirstTrack();				state = PlayerStates.READY;				dispatchEvent(new PlayerEvent(PlayerEvent.PLAYLIST_LOADED));			}			else{				dispatchEvent(new PlayerEvent(PlayerEvent.PLAYLIST_UPDATED));			}			if(_playlist.toArray().length ==0){				_playlist.gotoFirstTrack();				}			if(autoPlay){				play();			}		}		private function ioErrorEventHandler(e:IOErrorEvent):void{			dispatchEvent(new PlayerErrorEvent(PlayerErrorEvent.IO_ERROR));		}		private function currentTrackToBeRemovedHandler(e:PlayerInternalEvent):void{			stop();			_sound =null;			_soundChannel=null;			_playlist.gotoNextTrack();		}		private	function soundCompleteHandler(e:Event):void{			dispatchEvent(new PlayerEvent(PlayerEvent.TRACK_COMPLETE));						if(_playlist.totalTracks == _playlist.currentTrackNumber){ 				if(repeat == PlayerRepeat.REPEAT_ALL){					dispatchEvent(new PlayerEvent(PlayerEvent.PLAYLIST_END_REACHED));					next();					play();				}				else if(repeat == PlayerRepeat.REPEAT_NONE){					stop();				}			}			else{				if(repeat == PlayerRepeat.REPEAT_SINGLE){						stop();					play();				}				else{					next();					play();				}			}		}	} }